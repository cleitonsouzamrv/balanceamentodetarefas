# task_load_balancer.py
# Aplica√ß√£o para an√°lise e balanceamento de carga hor√°ria por fun√ß√£o utilizando Streamlit
# Autor: [Seu Nome]
# Descri√ß√£o: L√™ tarefas de um arquivo Excel/CSV, calcula carga hor√°ria semanal, mensal e anual,
# permite an√°lise interativa, exporta relat√≥rios e gr√°ficos em Excel e PDF.

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from collections import defaultdict
from io import BytesIO
from fpdf import FPDF
import tempfile
import plotly.express as px

# Configura√ß√£o inicial da aplica√ß√£o Streamlit
st.set_page_config(page_title="Balanceador de Tarefas", layout="wide")
st.title("An√°lise e Balanceamento de Carga por Fun√ß√£o")

# Upload de arquivo CSV ou Excel contendo as tarefas
uploaded_file = st.file_uploader("Envie um arquivo CSV com as tarefas", type=["csv", "xlsx"])
if uploaded_file:
    if uploaded_file.name.endswith(".xlsx"):
        df = pd.read_excel(uploaded_file)
    else:
        df = pd.read_csv(uploaded_file)

    st.subheader("Tarefas Recebidas")
    st.dataframe(df)

    col_filtros = st.columns(3)
    with col_filtros[0]:
        etapa_selecionada = st.selectbox("Filtrar por ETAPA", options=["Todas"] + sorted(df['ETAPA'].dropna().unique().tolist()))
    with col_filtros[1]:
        atividade_selecionada = st.selectbox("Filtrar por ATIVIDADE", options=["Todas"] + sorted(df['ATIVIDADE'].dropna().unique().tolist()))
    with col_filtros[2]:
        funcao_selecionada = st.selectbox("Filtrar por FUN√á√ÉO", options=["Todas"] + sorted(df['FUN√á√ÉO'].dropna().unique().tolist()))

    if etapa_selecionada != "Todas":
        df = df[df['ETAPA'] == etapa_selecionada]
    if atividade_selecionada != "Todas":
        df = df[df['ATIVIDADE'] == atividade_selecionada]
    if funcao_selecionada != "Todas":
        df = df[df['FUN√á√ÉO'] == funcao_selecionada]

    if 'C.H ATUAL' in df.columns and 'FUN√á√ÉO' in df.columns:
        def time_to_hours(t):
            if pd.isna(t):
                return 0
            return t.hour + t.minute / 60 + t.second / 3600

        df['duracao_horas'] = df['C.H ATUAL'].apply(time_to_hours)
        tarefas_sem_frequencia = df[df['FREQU√äNCIA'].isna()].copy()
        df = df[~df['FREQU√äNCIA'].isna()]  # Remove tarefas sem frequ√™ncia
        df['FREQU√äNCIA'] = df['FREQU√äNCIA'].astype(str).str.strip().str.lower()

        def freq_para_mes(freq):
            mapa = {
                'di√°ria': 20,
                'diario': 20,
                'diariamente': 20,
                'semanal': 4,
                'quinzenal': 2,
                'mensal': 1,
                'bimestral': 0.5,
                'trimestral': 1/3,
                'semestral': 1/6,
                'anual': 1/12
            }
            return mapa.get(freq.strip(), 0)

        df['frequencia_mes'] = df['FREQU√äNCIA'].apply(freq_para_mes)
        df['carga_mensal'] = df['duracao_horas'] * df['frequencia_mes']
        df['carga_semanal'] = df['carga_mensal'] / 4
        df['carga_anual'] = df['carga_mensal'] * 12

        # garantir que todas as fun√ß√µes do dataset sejam representadas, at√© as com carga zero
        todas_funcoes = df['FUN√á√ÉO'].dropna().unique()
        carga_por_funcao = df.groupby('FUN√á√ÉO').agg(
            horas_semanais=('carga_semanal', 'sum'),
            horas_mensais=('carga_mensal', 'sum'),
            horas_anuais=('carga_anual', 'sum'),
            tarefas_total=('duracao_horas', 'count')
        ).reindex(todas_funcoes).fillna(0).reset_index()

        carga_por_funcao['media_diaria'] = carga_por_funcao['horas_semanais'] / 5

        st.subheader("Defina os limites m√°ximos de carga hor√°ria")
        limite_diario = st.number_input("Limite di√°rio por fun√ß√£o (h)", min_value=1, value=9)
        limite_semanal = st.number_input("Limite semanal por fun√ß√£o (h)", min_value=1, value=44)
        limite_mensal = st.number_input("Limite mensal por fun√ß√£o (h)", min_value=1, value=176)
        limite_anual = st.number_input("Limite anual por fun√ß√£o (h)", min_value=1, value=2112)

        carga_por_funcao['alerta_diaria'] = np.where(carga_por_funcao['media_diaria'] > limite_diario, '‚ö†Ô∏è Acima do limite di√°rio', '')
        carga_por_funcao['alerta_semanal'] = np.where(carga_por_funcao['horas_semanais'] > limite_semanal, '‚ö†Ô∏è Acima do limite semanal', '')
        carga_por_funcao['alerta_mensal'] = np.where(carga_por_funcao['horas_mensais'] > limite_mensal, '‚ö†Ô∏è Acima do limite mensal', '')
        carga_por_funcao['alerta_anual'] = np.where(carga_por_funcao['horas_anuais'] > limite_anual, '‚ö†Ô∏è Acima do limite anual', '')

        criterio_ocioso = st.selectbox("Crit√©rio para classificar ociosidade", ["mensal", "semanal"])
        percentual_ocioso = st.slider("% da carga para considerar fun√ß√£o ociosa", min_value=0.1, max_value=1.0, value=0.8, step=0.05)

        if criterio_ocioso == "mensal":
            carga_por_funcao['ocioso'] = np.where(
                carga_por_funcao['horas_mensais'] < (limite_mensal * percentual_ocioso),
                'üü¢ Abaixo de 80% da carga',
                ''
            )
        else:
            carga_por_funcao['ocioso'] = np.where(
                carga_por_funcao['horas_semanais'] < (limite_semanal * percentual_ocioso),
                'üü¢ Abaixo de 80% da carga',
                ''
            )

        st.subheader("Filtrar an√°lise por status")
        filtro_status = st.selectbox("Mostrar", ["Todos", "Apenas sobrecarregados", "Apenas ociosos"])
        if filtro_status == "Apenas sobrecarregados":
            carga_por_funcao = carga_por_funcao[carga_por_funcao['horas_mensais'] > limite_mensal]
        elif filtro_status == "Apenas ociosos":
            carga_por_funcao = carga_por_funcao[carga_por_funcao['ocioso'] != '']

        st.subheader("An√°lise de Carga por Fun√ß√£o")
        ocultar_zeradas = st.checkbox("Ocultar fun√ß√µes com 0 horas e 0 tarefas")
        if ocultar_zeradas:
            carga_por_funcao = carga_por_funcao[
                (carga_por_funcao['horas_mensais'] > 0) | (carga_por_funcao['tarefas_total'] > 0)
            ]
        st.dataframe(carga_por_funcao)

        if not tarefas_sem_frequencia.empty:
            st.subheader("Tarefas ignoradas por falta de frequ√™ncia")
        st.dataframe(tarefas_sem_frequencia)

        st.download_button(
            label="üì• Baixar tarefas sem frequ√™ncia",
            data=tarefas_sem_frequencia.to_csv(index=False).encode('utf-8'),
            file_name="tarefas_sem_frequencia.csv",
            mime="text/csv"
        )

        st.subheader("Tarefas que contribuem para sobrecarga")
        tarefas_alerta = df[df['FUN√á√ÉO'].isin(carga_por_funcao[carga_por_funcao['horas_mensais'] > limite_mensal]['FUN√á√ÉO'])]
        st.dataframe(tarefas_alerta)

        def gerar_excel_situacoes(df_tarefas, df_resumo):
            funcoes_sobrecarregadas = df_resumo[df_resumo['horas_mensais'] > limite_mensal]['FUN√á√ÉO']
            funcoes_ociosas = df_resumo[df_resumo['ocioso'] != '']['FUN√á√ÉO']
            tarefas_sobrecarregadas = df_tarefas[df_tarefas['FUN√á√ÉO'].isin(funcoes_sobrecarregadas)]
            tarefas_ociosas = df_tarefas[df_tarefas['FUN√á√ÉO'].isin(funcoes_ociosas)]
            output = BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                tarefas_sobrecarregadas.to_excel(writer, index=False, sheet_name='Fun√ß√µes Sobrecarregadas')
                tarefas_ociosas.to_excel(writer, index=False, sheet_name='Fun√ß√µes Ociosas')
            return output.getvalue()

        def gerar_excel_download(df):
            output = BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                df.to_excel(writer, index=False, sheet_name='Carga por Fun√ß√£o')
            return output.getvalue()

        def gerar_excel_tarefas_alerta(df):
            output = BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                df.to_excel(writer, index=False, sheet_name='Tarefas Cr√≠ticas')
            return output.getvalue()

        def gerar_pdf_resumo(df):
            pdf = FPDF()
            pdf.add_page()
            pdf.set_font("Arial", size=12)
            pdf.cell(200, 10, txt="Relatorio de Carga por Funcao", ln=True, align='C')
            for _, row in df.iterrows():
                alerta = row['alerta_mensal'].replace('‚ö†Ô∏è', '[!]') if isinstance(row['alerta_mensal'], str) else ''
                ocioso = row['ocioso'].replace('üü¢', '[OK]') if isinstance(row['ocioso'], str) else ''
                linha = f"{row['FUN√á√ÉO']}: {row['horas_mensais']:.1f}h/mes {alerta} {ocioso} ({row['horas_mensais']/limite_mensal:.0%})"
                pdf.cell(200, 10, txt=linha.encode('latin-1', 'ignore').decode('latin-1'), ln=True)

            pdf.add_page()
            pdf.set_font("Arial", size=10)
            pdf.cell(200, 10, txt="Grafico de Carga Semanal por Funcao", ln=True, align='C')
            fig, ax = plt.subplots()
            bars = ax.bar(df['FUN√á√ÉO'], df['horas_semanais'])
            ax.axhline(44, color='red', linestyle='--')
            for bar, hs in zip(bars, df['horas_semanais']):
                if hs > 44:
                    bar.set_color('orange')
                elif hs < 176 * 0.5 / 4:
                    bar.set_color('green')
            ax.set_ylabel("Horas Semanais")
            ax.set_title("Carga por Funcao")
            img_path = tempfile.NamedTemporaryFile(suffix=".png", delete=False).name
            fig.savefig(img_path)
            plt.close(fig)
            pdf.image(img_path, x=10, y=30, w=180)
            return pdf.output(dest='S').encode('latin-1')

        st.download_button("üì• Baixar fun√ß√µes sobrecarregadas/ociosas", data=gerar_excel_situacoes(df, carga_por_funcao), file_name="funcoes_situacoes.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
        st.download_button("üì• Baixar an√°lise de carga em Excel", data=gerar_excel_download(carga_por_funcao), file_name="analise_carga_funcoes.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
        st.download_button("üì• Baixar tarefas que causam sobrecarga", data=gerar_excel_tarefas_alerta(tarefas_alerta), file_name="tarefas_sobrecarga.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
        st.download_button("üì• Baixar relat√≥rio em PDF", data=gerar_pdf_resumo(carga_por_funcao), file_name="relatorio_carga_funcoes.pdf", mime="application/pdf")

        carga_por_funcao['diferenca_horas'] = limite_mensal - carga_por_funcao['horas_mensais']
        st.subheader("Gr√°fico Interativo de Carga Semanal")
        grafico = px.bar(
            carga_por_funcao,
            x='FUN√á√ÉO',
            y='horas_semanais',
            color=carga_por_funcao['horas_semanais'] > limite_semanal,
            color_discrete_map={True: 'orange', False: 'blue'},
            labels={'horas_semanais': 'Horas Semanais', 'FUN√á√ÉO': 'Fun√ß√£o'},
            title='Carga por Fun√ß√£o',
            hover_data=['FUN√á√ÉO', 'horas_semanais', 'diferenca_horas']
        )
        grafico.add_shape(
            type="line",
            x0=-0.5,
            x1=len(carga_por_funcao)-0.5,
            y0=float(limite_semanal),
            y1=float(limite_semanal),
            line=dict(color="red", width=2, dash="dash")
        )
        grafico.update_layout(showlegend=False)
        st.plotly_chart(grafico, use_container_width=True)

        st.subheader("Gr√°fico Interativo de Fun√ß√µes Ociosas")
        funcoes_ociosas_df = carga_por_funcao[carga_por_funcao['ocioso'] != '']
        if not funcoes_ociosas_df.empty:
            grafico_ociosas = px.bar(
                funcoes_ociosas_df,
                x='FUN√á√ÉO',
                y='horas_semanais',
                color_discrete_sequence=['green'],
                labels={'horas_semanais': 'Horas Semanais', 'FUN√á√ÉO': 'Fun√ß√£o'},
                title='Fun√ß√µes com baixa ocupa√ß√£o',
                hover_data=['FUN√á√ÉO', 'horas_semanais', 'diferenca_horas']
            )
            grafico_ociosas.update_layout(showlegend=False)
            st.plotly_chart(grafico_ociosas, use_container_width=True)
        else:
            st.info("Nenhuma fun√ß√£o identificada como ociosa com base no crit√©rio atual.")

# Parte de redistribui√ß√£o permanece inalterada...


